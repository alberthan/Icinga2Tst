#!/usr/bin/env python

import os
import re
import subprocess
import sys
import yaml

"""
1. parse basic YAML grammars
2. fail if there are space/tab lines
3. fail if spaces in any Key
"""

yamlList = []
grammarGood = True
spaceLine = True
spaceKey = True

modified = re.compile('^\s*[MA]\s+(?P<name>.*.yaml)$')

def findYAMLs():
    global yamlList

    p = subprocess.Popen(['git', 'status', '--porcelain'], stdout=subprocess.PIPE)
    out, err = p.communicate()
    for line in out.splitlines():
        match = modified.match(line)
        if match:
            yamlList.append(match.group('name'))

    print yamlList
    if len(yamlList):
        return 1
    else:
        print "No YAML files modified, pre-commit check will quit."
        return 0

def parseYAML(pList):
    global grammarGood
    for file in pList:
        f = open(file, "r")
        try:
            yaml.load(f)
        except Exception as e:
            print e
            print file + " grammar illegal."
            grammarGood = False
        else:
            print file + " grammar is OK."
        finally:
            f.close()

def parseSpaceTabLine(pList):
    global spaceLine
    for file in pList:
        f = open(file, "r")
        line = True
        i = 0
        while line:
            i += 1
            line = f.readline()
            tmp = line.strip("\r").strip("\n")
            # line starts with [ \t\f\v] and ends with [ \t\f\v], do not care \r\n because they are legal
            if re.match('^[ \t\f\v]*[ \t\f\v]$', tmp):
                print "There is space/tab line in file %s at line %d, please remove it." % (file, i)
                spaceLine = False
        f.close()

    if spaceLine:
        print "There is no space/tab line in YAML files, --OK"

def unwindDict(file, pDict):
    global spaceKey
    if not isinstance(pDict, dict):
        return
    for k,v in pDict.iteritems():
        if re.search('\s', k):
            print "There are space characters in %s YAML key, please check this: %s" % (file, k)
            spaceKey = False
        unwindDict(file, v)

def parseKeys(pList):
    global spaceKey
    for file in pList:
        f = open(sys.argv[1] + file, "r")
        try:
            dict = yaml.load(f)
            unwindDict(file, dict)
        except Exception as e:
            print e
            spaceKey= False
        else:
            pass
        finally:
            f.close()

    if spaceKey:
        print "There is no space/tab in YAML keys, --OK"

def main():
    global grammarGood, spaceLine, spaceKey
    if findYAMLs():
        print "Start parsing YAMLs..."
        parseYAML(yamlList)
        parseSpaceTabLine(yamlList)
        #parseKeys(yamlList)
        if grammarGood and spaceLine and spaceKey:
            print "All good for YAML files grammar."
            return 0
        else:
            print "YAML grammar abnormal, please check and commit again."
            return 1

if __name__ == "__main__":
    sys.exit( main( ) )
